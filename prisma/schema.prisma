
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  role           Role      @default(STUDENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  events         Event[]
  materials      Material[]
  posts          ForumPost[]
  notices        Notice[]
  forumReplies   ForumReply[]
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}

model Material {
  id          String   @id @default(uuid())
  title       String
  subject     String
  department  String
  type        String
  fileUrl     String
  fileSize    String
  year        String
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  uploader    User     @relation(fields: [uploaderId], references: [id])
  uploaderId  String
}

model Event {
  id          String   @id @default(uuid())
  title       String
  date        DateTime
  time        String
  location    String
  description String
  status      String   @default("upcoming")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}

model Notice {
  id          String   @id @default(uuid())
  title       String
  content     String
  priority    String
  date        DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ForumPost {
  id          String       @id @default(uuid())
  title       String
  content     String
  status      String       @default("active")
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  replies     ForumReply[]
}

model ForumReply {
  id          String    @id @default(uuid())
  content     String
  post        ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
